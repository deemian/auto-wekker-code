let timer = 0 // This is the total number of minutes in the timer (increases by pressing buttons and decreases when time is ticking down)
let timerRunning = false //indicates if the timer is running or not
let ground = true //indicates if the car sees ground under it or not (true means there's ground)
let distance = 0 //this is the distance between the car and the nearest object UNDER the car
let motor = false //indicates if the motor is on or not
let breakLoop = true //used to break the loop in the motor section
const distanceThreshold = 10 //if the distance between the car and the ground is greater than this, it should go in reverse
const distanceDivider = 58 //divide by this to get the correct distance calculated


let digits: number[] = [0, 0, 0, 0, 0, 0, 0] // This stores every single digit in the minute counter, so 342 minutes would be 3, 4, 2. It's an array so it's very easy to add more digits


//this function sets all lights to the correct color (assigns a color to every digit in the number) This can easily be expanded by adding more lines with more colors
function setAllLights() {
    light.setPixelColor(digits[0] - 1, Colors.Red)
    light.setPixelColor(digits[1] - 1, Colors.Blue)
    light.setPixelColor(digits[2] - 1, Colors.Green)
    light.setPixelColor(digits[3] - 1, Colors.Orange)
    light.setPixelColor(digits[4] - 1, Colors.Yellow)
}

//this function adds a minute to the timer (and corrects the displayed lights)
function addMinutes(minutes: number) {
    light.clear()
    timer += minutes
    digits[0] += minutes
    correctDigits()
    setAllLights()
}


//this function corrects digits when they go over 9 or go below 0, because for example if it goes to 10, it should go back to 0
function correctDigits() {
    for (let i = 0; i < digits.length; i++) {
        if (digits[i] > 9) {
            digits[i] -= 10
            digits[i + 1]++
        }
    }

    for (let i = 0; i < digits.length; i++) {
        if (digits[i] === -1) {
            digits[i] = 9
            digits[i + 1] -= 1
        }
    }
}

// these functions start the alternating of lights when 2 or more digits are the same number
function alternatingLights(c1: number, c2: number) {
    pause(10)
    light.setPixelColor(digits[0] - 1, c1)
    pause(300)
    light.setPixelColor(digits[0] - 1, c2)
    pause(300)
}

function alternatingLights2(c1: number, c2: number) {
    pause(10)
    light.setPixelColor(digits[1] - 1, c1)
    pause(300)
    light.setPixelColor(digits[1] - 1, c2)
    pause(300)
}

function threeAlternatingLights(c1: number, c2: number, c3: number) {
    pause(10)
    light.setPixelColor(digits[0] - 1, c1)
    pause(300)
    light.setPixelColor(digits[0] - 1, c2)
    pause(300)
    light.setPixelColor(digits[0] - 1, c3)
    pause(300)
}

// add 1 minute to the timer
input.buttonA.onEvent(ButtonEvent.Click, function () {
    addMinutes(1)
})

// add 5 minutes to the timer
input.buttonB.onEvent(ButtonEvent.Click, function () {
    addMinutes(5)
})


//adds 10 minutes to the timer
input.buttonsAB.onEvent(ButtonEvent.Click, function () {
    addMinutes(10)
})

//long click on B resets everything
input.buttonB.onEvent(ButtonEvent.LongClick, function () {
    timer = 0
    for (let i = 0; i < digits.length; i++) {
        digits[i] = 0
    }
    light.setAll(0)
    timerRunning = false
    crickit.motor2.stop()
    crickit.motor1.stop()
    motor = false
    breakLoop = false
})

loops.forever(function () {
    //this constantly tracks the distance between the detector and the nearest object, and sets the variable 'distance' to that
    pins.A2.digitalWrite(false)
    control.waitMicros(2)
    pins.A2.digitalWrite(true)
    control.waitMicros(10)
    pins.A2.digitalWrite(false)

    distance = pins.A3.pulseIn(PulseValue.High) / distanceDivider
    console.log(distance)
    if (distance < distanceThreshold) {
        ground = true
        console.log(ground)
    } else {
        ground = false
        console.log(ground)
    }
})

// long click on A starts the timer
input.buttonA.onEvent(ButtonEvent.LongClick, function () {
    timerRunning = true
})

// count down system
loops.forever(function () {
    if (timerRunning === true) {
        if (timer > 0) {
            pause(1000)
            light.clear()

            timer -= 1
            digits[0] -= 1

            correctDigits()

            setAllLights()

            // when the timer is at 0 this starts
        } else {
            motor = true
            light.showAnimation(light.cometAnimation, 10000)
            light.setAll(Colors.Black)
        }
    }
})

//this section controls wether the car should be going forward or backwards
loops.forever(function () {
    if (motor) {
        //if ground = true it can go forward, but we only want to start the motors once so we use breakLoop to not constantly start the motors over and over
        if (ground && breakLoop) {
            crickit.motor2.stop()
            crickit.motor1.stop()
            breakLoop = false

            pause(500)

            crickit.motor1.run(-60)
            crickit.motor2.run(-60)
            console.log(`forward`)

            // if ground = false it means there's a fall in front of the car, so the motors get stopped and put in reverse
        } else if (!ground) {

            crickit.motor2.stop()
            crickit.motor1.stop()

            pause(500)

            crickit.motor1.run(60)
            crickit.motor2.run(60)
            console.log(`backward`)
            pause(2000)
            breakLoop = true
        }
    }
})

// this part makes it so that when theres 2 lights on the same pixel, they start alternating
loops.forever(function () {
    if (digits[0] === digits[1] && digits[0] !== 0) {
        alternatingLights(Colors.Blue, Colors.Red)
    }

    if (digits[0] === digits[2] && digits[0] !== 0) {
        alternatingLights(Colors.Green, Colors.Red)
    }

    if (digits[1] === digits[2] && digits[1] !== 0) {
        alternatingLights2(Colors.Green, Colors.Blue)
    }

    if (digits[0] === digits[1] && digits[1] === digits[2] && digits[0] !== 0) {
        threeAlternatingLights(Colors.Green, Colors.Blue, Colors.Red)
    }
}) 
